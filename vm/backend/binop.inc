
#if !defined(OP)
#error before including test.inc, #define OP
#endif

#if !defined(WRITE)
#error before including test.inc, #define WRITE
#endif

#if !defined(NAME)
#error before including test.inc, #define NAME
#endif

#if !defined(OP_F)
#define OP_F(x, y) OP(x, y)
#endif

#if VM_MATH_SWITCH
#define LABEL(X, Y) case COMBINE(X, Y):;
#else
#define LABEL(X, Y) LABEL(X, Y):;
#endif

#define COMBINE(x, y) ((x)*VM_TAG_MAX + (y))

#if !VM_MATH_SWITCH
static void *binop_table[COMBINE(VM_TAG_MAX, VM_TAG_MAX)] = {
    [COMBINE(VM_TAG_I8, VM_TAG_I8)] = &&LABEL(VM_TAG_I8, VM_TAG_I8),
    [COMBINE(VM_TAG_I8, VM_TAG_I16)] = &&LABEL(VM_TAG_I8, VM_TAG_I16),
    [COMBINE(VM_TAG_I8, VM_TAG_I32)] = &&LABEL(VM_TAG_I8, VM_TAG_I32),
    [COMBINE(VM_TAG_I8, VM_TAG_I64)] = &&LABEL(VM_TAG_I8, VM_TAG_I64),
    [COMBINE(VM_TAG_I8, VM_TAG_F32)] = &&LABEL(VM_TAG_I8, VM_TAG_F32),
    [COMBINE(VM_TAG_I8, VM_TAG_F64)] = &&LABEL(VM_TAG_I8, VM_TAG_F64),

    [COMBINE(VM_TAG_I16, VM_TAG_I8)] = &&LABEL(VM_TAG_I16, VM_TAG_I8),
    [COMBINE(VM_TAG_I16, VM_TAG_I16)] = &&LABEL(VM_TAG_I16, VM_TAG_I16),
    [COMBINE(VM_TAG_I16, VM_TAG_I32)] = &&LABEL(VM_TAG_I16, VM_TAG_I32),
    [COMBINE(VM_TAG_I16, VM_TAG_I64)] = &&LABEL(VM_TAG_I16, VM_TAG_I64),
    [COMBINE(VM_TAG_I16, VM_TAG_F32)] = &&LABEL(VM_TAG_I16, VM_TAG_F32),
    [COMBINE(VM_TAG_I16, VM_TAG_F64)] = &&LABEL(VM_TAG_I16, VM_TAG_F64),

    [COMBINE(VM_TAG_I32, VM_TAG_I8)] = &&LABEL(VM_TAG_I32, VM_TAG_I8),
    [COMBINE(VM_TAG_I32, VM_TAG_I16)] = &&LABEL(VM_TAG_I32, VM_TAG_I16),
    [COMBINE(VM_TAG_I32, VM_TAG_I32)] = &&LABEL(VM_TAG_I32, VM_TAG_I32),
    [COMBINE(VM_TAG_I32, VM_TAG_I64)] = &&LABEL(VM_TAG_I32, VM_TAG_I64),
    [COMBINE(VM_TAG_I32, VM_TAG_F32)] = &&LABEL(VM_TAG_I32, VM_TAG_F32),
    [COMBINE(VM_TAG_I32, VM_TAG_F64)] = &&LABEL(VM_TAG_I32, VM_TAG_F64),

    [COMBINE(VM_TAG_I64, VM_TAG_I8)] = &&LABEL(VM_TAG_I64, VM_TAG_I8),
    [COMBINE(VM_TAG_I64, VM_TAG_I16)] = &&LABEL(VM_TAG_I64, VM_TAG_I16),
    [COMBINE(VM_TAG_I64, VM_TAG_I32)] = &&LABEL(VM_TAG_I64, VM_TAG_I32),
    [COMBINE(VM_TAG_I64, VM_TAG_I64)] = &&LABEL(VM_TAG_I64, VM_TAG_I64),
    [COMBINE(VM_TAG_I64, VM_TAG_F32)] = &&LABEL(VM_TAG_I64, VM_TAG_F32),
    [COMBINE(VM_TAG_I64, VM_TAG_F64)] = &&LABEL(VM_TAG_I64, VM_TAG_F64),

    [COMBINE(VM_TAG_F32, VM_TAG_I8)] = &&LABEL(VM_TAG_F32, VM_TAG_I8),
    [COMBINE(VM_TAG_F32, VM_TAG_I16)] = &&LABEL(VM_TAG_F32, VM_TAG_I16),
    [COMBINE(VM_TAG_F32, VM_TAG_I32)] = &&LABEL(VM_TAG_F32, VM_TAG_I32),
    [COMBINE(VM_TAG_F32, VM_TAG_I64)] = &&LABEL(VM_TAG_F32, VM_TAG_I64),
    [COMBINE(VM_TAG_F32, VM_TAG_F32)] = &&LABEL(VM_TAG_F32, VM_TAG_F32),
    [COMBINE(VM_TAG_F32, VM_TAG_F64)] = &&LABEL(VM_TAG_F32, VM_TAG_F64),

    [COMBINE(VM_TAG_F64, VM_TAG_I8)] = &&LABEL(VM_TAG_F64, VM_TAG_I8),
    [COMBINE(VM_TAG_F64, VM_TAG_I16)] = &&LABEL(VM_TAG_F64, VM_TAG_I16),
    [COMBINE(VM_TAG_F64, VM_TAG_I32)] = &&LABEL(VM_TAG_F64, VM_TAG_I32),
    [COMBINE(VM_TAG_F64, VM_TAG_I64)] = &&LABEL(VM_TAG_F64, VM_TAG_I64),
    [COMBINE(VM_TAG_F64, VM_TAG_F32)] = &&LABEL(VM_TAG_F64, VM_TAG_F32),
    [COMBINE(VM_TAG_F64, VM_TAG_F64)] = &&LABEL(VM_TAG_F64, VM_TAG_F64),
};
#endif

#if VM_MATH_SWITCH
switch (COMBINE(v1.tag, v2.tag)) {
    default: {
        __builtin_trap();
    }
#else
goto *binop_table[COMBINE(v1.tag, v2.tag)];
#endif
LABEL(VM_TAG_I8, VM_TAG_I8) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I8,
        .value.i8 = OP(v1.value.i8, v2.value.i8),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I8, VM_TAG_I16) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I16,
        .value.i16 = (int16_t) OP(v1.value.i8, v2.value.i16),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I8, VM_TAG_I32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I32,
        .value.i32 = (int32_t) OP(v1.value.i8, v2.value.i32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I8, VM_TAG_I64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I64,
        .value.i64 = (int64_t) OP(v1.value.i8, v2.value.i64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I8, VM_TAG_F32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F((float) v1.value.i8, v2.value.f32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I8, VM_TAG_F64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f64 = OP_F((double) v1.value.i8, v2.value.f64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I16, VM_TAG_I8) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I16,
        .value.i16 = OP(v1.value.i16, (int16_t) v2.value.i8),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I16, VM_TAG_I16) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I16,
        .value.i16 = OP(v1.value.i16, v2.value.i16),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I16, VM_TAG_I32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I32,
        .value.i32 = (int32_t) OP(v1.value.i16, v2.value.i32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I16, VM_TAG_I64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I64,
        .value.i64 = (int64_t) OP(v1.value.i16, v2.value.i64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I16, VM_TAG_F32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F((float) v1.value.i16, v2.value.f32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I16, VM_TAG_F64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f64 = OP_F((double) v1.value.i16, v2.value.f64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I32, VM_TAG_I8) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I32,
        .value.i16 = OP(v1.value.i32, (int32_t) v2.value.i8),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I32, VM_TAG_I16) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I32,
        .value.i16 = OP(v1.value.i32, (int32_t) v2.value.i16),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I32, VM_TAG_I32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I32,
        .value.i32 = OP(v1.value.i32, v2.value.i32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I32, VM_TAG_I64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I64,
        .value.i64 = (int64_t) OP(v1.value.i32, v2.value.i64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I32, VM_TAG_F32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F((float) v1.value.i32, v2.value.f32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I32, VM_TAG_F64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f64 = OP_F((double) v1.value.i32, v2.value.f64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I64, VM_TAG_I8) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I64,
        .value.i16 = OP(v1.value.i64, (int64_t) v2.value.i8),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I64, VM_TAG_I16) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I64,
        .value.i16 = OP(v1.value.i64, (int64_t) v2.value.i16),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I64, VM_TAG_I32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I64,
        .value.i32 = OP(v1.value.i64, (int64_t) v2.value.i32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I64, VM_TAG_I64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_I64,
        .value.i64 = OP(v1.value.i64, v2.value.i64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I64, VM_TAG_F32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F((float) v1.value.i64, v2.value.f32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_I64, VM_TAG_F64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f64 = OP_F((double) v1.value.i64, v2.value.f64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F32, VM_TAG_I8) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F(v1.value.f32, (float) v2.value.i8),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F32, VM_TAG_I16) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F(v1.value.f32, (float) v2.value.i16),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F32, VM_TAG_I32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F(v1.value.f32, (float) v2.value.i32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F32, VM_TAG_I64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F(v1.value.f32, (float) v2.value.i64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F32, VM_TAG_F32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F32,
        .value.f32 = OP_F(v1.value.f32, v2.value.f32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F32, VM_TAG_F64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f64 = OP_F((double) v1.value.f32, v2.value.f64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F64, VM_TAG_I8) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f32 = OP_F(v1.value.f64, (double) v2.value.i8),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F64, VM_TAG_I16) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f32 = OP_F(v1.value.f64, (double) v2.value.i16),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F64, VM_TAG_I32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f32 = OP_F(v1.value.f64, (double) v2.value.i32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F64, VM_TAG_I64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f32 = OP_F(v1.value.f64, (double) v2.value.i64),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F64, VM_TAG_F32) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f32 = OP_F(v1.value.f64, (double) v2.value.f32),
    };
    goto CONCAT(NAME, END);
}
LABEL(VM_TAG_F64, VM_TAG_F64) {
    WRITE (vm_std_value_t) {
        .tag = VM_TAG_F64,
        .value.f64 = OP_F(v1.value.f64, v2.value.f64),
    };
    goto CONCAT(NAME, END);
}
#if VM_MATH_SWITCH
}
#endif
CONCAT(NAME, END):;

#undef COMBINE

#undef NAME
#undef WRITE
#undef OP
#undef OP_F
