
enum {
    // move (const)
    VM_INT_OP_CONST_NIL  , // (out: reg(nil ))
    VM_INT_OP_CONST_FALSE, // (out: reg(bool))
    VM_INT_OP_CONST_TRUE , // (out: reg(bool))
    // move (reg)
    VM_INT_OP_MOVE_BOOL , // (out: reg(bool), in: reg(bool))
    VM_INT_OP_MOVE_I8   , // (out: reg(i8  ), in: reg(i8  ))
    VM_INT_OP_MOVE_I16  , // (out: reg(i16 ), in: reg(i16 ))
    VM_INT_OP_MOVE_V32  , // (out: reg(v32 ), in: reg(v32 ))
    VM_INT_OP_MOVE_V64  , // (out: reg(v64 ), in: reg(v64 ))
    VM_INT_OP_MOVE_PTR  , // (out: reg(ptr ), in: reg(ptr ))
    // add
    VM_INT_OP_ADD_i8 , // (out: reg(i8 ), lhs: reg(i8 ), rhs: reg(i8 ))
    VM_INT_OP_ADD_I16, // (out: reg(i16), lhs: reg(i16), rhs: reg(i16))
    VM_INT_OP_ADD_I32, // (out: reg(i32), lhs: reg(i32), rhs: reg(i32))
    VM_INT_OP_ADD_I64, // (out: reg(i64), lhs: reg(i64), rhs: reg(i64))
    VM_INT_OP_ADD_F32, // (out: reg(f32), lhs: reg(f32), rhs: reg(f32))
    VM_INT_OP_ADD_F64, // (out: reg(f64), lhs: reg(f64), rhs: reg(f64))
    // sub
    VM_INT_OP_SUB_i8 , // (out: reg(i8 ), lhs: reg(i8 ), rhs: reg(i8 ))
    VM_INT_OP_SUB_I16, // (out: reg(i16), lhs: reg(i16), rhs: reg(i16))
    VM_INT_OP_SUB_I32, // (out: reg(i32), lhs: reg(i32), rhs: reg(i32))
    VM_INT_OP_SUB_I64, // (out: reg(i64), lhs: reg(i64), rhs: reg(i64))
    VM_INT_OP_SUB_F32, // (out: reg(f32), lhs: reg(f32), rhs: reg(f32))
    VM_INT_OP_SUB_F64, // (out: reg(f64), lhs: reg(f64), rhs: reg(f64))
    // mul
    VM_INT_OP_MUL_i8 , // (out: reg(i8 ), lhs: reg(i8 ), rhs: reg(i8 ))
    VM_INT_OP_MUL_I16, // (out: reg(i16), lhs: reg(i16), rhs: reg(i16))
    VM_INT_OP_MUL_I32, // (out: reg(i32), lhs: reg(i32), rhs: reg(i32))
    VM_INT_OP_MUL_I64, // (out: reg(i64), lhs: reg(i64), rhs: reg(i64))
    VM_INT_OP_MUL_F32, // (out: reg(f32), lhs: reg(f32), rhs: reg(f32))
    VM_INT_OP_MUL_F64, // (out: reg(f64), lhs: reg(f64), rhs: reg(f64))
    // div
    VM_INT_OP_DIV_i8 , // (out: reg(i8 ), lhs: reg(i8 ), rhs: reg(i8 ))
    VM_INT_OP_DIV_I16, // (out: reg(i16), lhs: reg(i16), rhs: reg(i16))
    VM_INT_OP_DIV_I32, // (out: reg(i32), lhs: reg(i32), rhs: reg(i32))
    VM_INT_OP_DIV_I64, // (out: reg(i64), lhs: reg(i64), rhs: reg(i64))
    VM_INT_OP_DIV_F32, // (out: reg(f32), lhs: reg(f32), rhs: reg(f32))
    VM_INT_OP_DIV_F64, // (out: reg(f64), lhs: reg(f64), rhs: reg(f64))
    // idiv
    VM_INT_OP_IDIV_i8 , // (out: reg(i8 ), lhs: reg(i8 ), rhs: reg(i8 ))
    VM_INT_OP_IDIV_I16, // (out: reg(i16), lhs: reg(i16), rhs: reg(i16))
    VM_INT_OP_IDIV_I32, // (out: reg(i32), lhs: reg(i32), rhs: reg(i32))
    VM_INT_OP_IDIV_I64, // (out: reg(i64), lhs: reg(i64), rhs: reg(i64))
    VM_INT_OP_IDIV_F32, // (out: reg(f32), lhs: reg(f32), rhs: reg(f32))
    VM_INT_OP_IDIV_F64, // (out: reg(f64), lhs: reg(f64), rhs: reg(f64))
    // mod
    VM_INT_OP_MOD_i8 , // (out: reg(i8 ), lhs: reg(i8 ), rhs: reg(i8 ))
    VM_INT_OP_MOD_I16, // (out: reg(i16), lhs: reg(i16), rhs: reg(i16))
    VM_INT_OP_MOD_I32, // (out: reg(i32), lhs: reg(i32), rhs: reg(i32))
    VM_INT_OP_MOD_I64, // (out: reg(i64), lhs: reg(i64), rhs: reg(i64))
    VM_INT_OP_MOD_F32, // (out: reg(f32), lhs: reg(f32), rhs: reg(f32))
    VM_INT_OP_MOD_F64, // (out: reg(f64), lhs: reg(f64), rhs: reg(f64))
    // new
    VM_INT_OP_TABLE_NEW, // (out: reg(table))
    // set
    VM_INT_OP_TABLE_SET, // (tab: reg(table), key: {tag, any}, value: {tag, any})
    // get
    VM_INT_OP_TABLE_GET, // (tab: reg(table), key: {tag, any}, reg: reg(any), then: array(#types, rblock))
    // len
    VM_INT_OP_TABLE_LEN, // (out: reg(i32), tab: reg(table))
    // bb
    VM_INT_OP_BRANCH_BOOL, // (cond: reg(bool), then: rblock, else: rblock)
    // blt
    VM_INT_OP_BRANCH_LT_I8 , // (lhs: reg(i8 ), rhs: reg(i8 ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LT_I16, // (lhs: reg(i16), rhs: reg(i16), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LT_I32, // (lhs: reg(i32), rhs: reg(i32), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LT_I64, // (lhs: reg(i64), rhs: reg(i64), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LT_F32, // (lhs: reg(f32), rhs: reg(f32), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LT_F64, // (lhs: reg(f64), rhs: reg(f64), then: rblock, else: rblock)
    // blt
    VM_INT_OP_BRANCH_LE_I8 , // (lhs: reg(i8 ), rhs: reg(i8 ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LE_I16, // (lhs: reg(i16), rhs: reg(i16), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LE_I32, // (lhs: reg(i32), rhs: reg(i32), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LE_I64, // (lhs: reg(i64), rhs: reg(i64), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LE_F32, // (lhs: reg(f32), rhs: reg(f32), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_LE_F64, // (lhs: reg(f64), rhs: reg(f64), then: rblock, else: rblock)
    // beq
    VM_INT_OP_BRANCH_EQ_BOOL, // (lhs: reg(bool  ), rhs: reg(bool  ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_I8  , // (lhs: reg(i8    ), rhs: reg(i8    ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_I16 , // (lhs: reg(i16   ), rhs: reg(i16   ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_I32 , // (lhs: reg(i32   ), rhs: reg(i32   ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_I64 , // (lhs: reg(i64   ), rhs: reg(i64   ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_F32 , // (lhs: reg(f32   ), rhs: reg(f32   ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_F64 , // (lhs: reg(f64   ), rhs: reg(f64   ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_STR , // (lhs: reg(str   ), rhs: reg(str   ), then: rblock, else: rblock)
    VM_INT_OP_BRANCH_EQ_PTR , // (lhs: reg(bitcmp), rhs: reg(bitcmp), then: rblock, else: rblock)
    // ret (const)
    VM_INT_OP_RET_NIL  , // ()
    VM_INT_OP_RET_FALSE, // ()
    VM_INT_OP_RET_TRUE , // ()
    // ret (reg)
    VM_INT_OP_RET_NIL    , // (val: reg(nil    )) 
    VM_INT_OP_RET_BOOL   , // (val: reg(bool   )) 
    VM_INT_OP_RET_I8     , // (val: reg(i8     )) 
    VM_INT_OP_RET_I16    , // (val: reg(i16    )) 
    VM_INT_OP_RET_I32    , // (val: reg(i32    )) 
    VM_INT_OP_RET_I64    , // (val: reg(i64    )) 
    VM_INT_OP_RET_F32    , // (val: reg(f32    )) 
    VM_INT_OP_RET_F64    , // (val: reg(f64    ))  
    VM_INT_OP_RET_STR    , // (val: reg(str    )) 
    VM_INT_OP_RET_CLOSURE, // (val: reg(closure)) 
    VM_INT_OP_RET_FUN    , // (val: reg(fun    )) 
    VM_INT_OP_RET_TAB    , // (val: reg(tab    )) 
    VM_INT_OP_RET_FFI    , // (val: reg(ffi    )) 
    VM_INT_OP_RET_ERROR  , // (val: reg(error  ))
    // call
    VM_INT_OP_CALL_TAB    , // (func: tab    , n: i32, args: ...dyn[n], reg: dyn, then: rblock[#types])
    VM_INT_OP_CALL_FFI    , // (func: ffi    , n: i32, args: ...dyn[n], reg: dyn, then: rblock[#types])
    VM_INT_OP_CALL_CLOSURE, // (func: closure, n: i32, args: ...dyn[n], reg: dyn, then: rblock[#types])
};
